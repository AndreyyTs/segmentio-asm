// Code generated by command: go run dedupe_asm.go -pkg sortedset -out ../sortedset/dedupe_amd64.s -stubs ../sortedset/dedupe_amd64.go. DO NOT EDIT.

#include "textflag.h"

// func dedupe1(dst []byte, src []byte) int
// Requires: CMOV
TEXT ·dedupe1(SB), NOSPLIT, $0-56
	MOVQ src_len+32(FP), AX
	CMPQ AX, $0x00
	JE   short
	MOVQ dst_base+0(FP), CX
	MOVQ src_base+24(FP), DX
	MOVQ DX, BX
	MOVQ CX, SI
	ADDQ $0x01, DX
	SUBQ $0x01, AX
	MOVB (BX), DI
	MOVB DI, (SI)
	ADDQ $0x01, SI
	CMPQ AX, $0x00
	JE   done

generic:
	MOVQ    SI, DI
	ADDQ    $0x01, DI
	MOVB    (BX), R8
	MOVB    (DX), R9
	MOVB    R9, (SI)
	CMPB    R8, R9
	CMOVQNE DI, SI
	ADDQ    $0x01, BX
	ADDQ    $0x01, DX
	SUBQ    $0x01, AX
	CMPQ    AX, $0x00
	JG      generic

done:
	SUBQ CX, SI
	MOVQ SI, ret+48(FP)
	RET

short:
	MOVQ AX, ret+48(FP)
	RET

// func dedupe2(dst []byte, src []byte) int
// Requires: CMOV
TEXT ·dedupe2(SB), NOSPLIT, $0-56
	MOVQ src_len+32(FP), AX
	CMPQ AX, $0x00
	JE   short
	MOVQ dst_base+0(FP), CX
	MOVQ src_base+24(FP), DX
	MOVQ DX, BX
	MOVQ CX, SI
	ADDQ $0x02, DX
	SUBQ $0x02, AX
	MOVW (BX), DI
	MOVW DI, (SI)
	ADDQ $0x02, SI
	CMPQ AX, $0x00
	JE   done

generic:
	MOVQ    SI, DI
	ADDQ    $0x02, DI
	MOVW    (BX), R8
	MOVW    (DX), R9
	MOVW    R9, (SI)
	CMPW    R8, R9
	CMOVQNE DI, SI
	ADDQ    $0x02, BX
	ADDQ    $0x02, DX
	SUBQ    $0x02, AX
	CMPQ    AX, $0x00
	JG      generic

done:
	SUBQ CX, SI
	MOVQ SI, ret+48(FP)
	RET

short:
	MOVQ AX, ret+48(FP)
	RET

// func dedupe4(dst []byte, src []byte) int
// Requires: CMOV
TEXT ·dedupe4(SB), NOSPLIT, $0-56
	MOVQ src_len+32(FP), AX
	CMPQ AX, $0x00
	JE   short
	MOVQ dst_base+0(FP), CX
	MOVQ src_base+24(FP), DX
	MOVQ DX, BX
	MOVQ CX, SI
	ADDQ $0x04, DX
	SUBQ $0x04, AX
	MOVL (BX), DI
	MOVL DI, (SI)
	ADDQ $0x04, SI
	CMPQ AX, $0x00
	JE   done

generic:
	MOVQ    SI, DI
	ADDQ    $0x04, DI
	MOVL    (BX), R8
	MOVL    (DX), R9
	MOVL    R9, (SI)
	CMPL    R8, R9
	CMOVQNE DI, SI
	ADDQ    $0x04, BX
	ADDQ    $0x04, DX
	SUBQ    $0x04, AX
	CMPQ    AX, $0x00
	JG      generic

done:
	SUBQ CX, SI
	MOVQ SI, ret+48(FP)
	RET

short:
	MOVQ AX, ret+48(FP)
	RET

// func dedupe8(dst []byte, src []byte) int
// Requires: CMOV
TEXT ·dedupe8(SB), NOSPLIT, $0-56
	MOVQ src_len+32(FP), AX
	CMPQ AX, $0x00
	JE   short
	MOVQ dst_base+0(FP), CX
	MOVQ src_base+24(FP), DX
	MOVQ DX, BX
	MOVQ CX, SI
	ADDQ $0x08, DX
	SUBQ $0x08, AX
	MOVQ (BX), DI
	MOVQ DI, (SI)
	ADDQ $0x08, SI
	CMPQ AX, $0x00
	JE   done

generic:
	MOVQ    SI, DI
	ADDQ    $0x08, DI
	MOVQ    (BX), R8
	MOVQ    (DX), R9
	MOVQ    R9, (SI)
	CMPQ    R8, R9
	CMOVQNE DI, SI
	ADDQ    $0x08, BX
	ADDQ    $0x08, DX
	SUBQ    $0x08, AX
	CMPQ    AX, $0x00
	JG      generic

done:
	SUBQ CX, SI
	MOVQ SI, ret+48(FP)
	RET

short:
	MOVQ AX, ret+48(FP)
	RET

// func dedupe16(dst []byte, src []byte) int
// Requires: CMOV, SSE2, SSE4.1
TEXT ·dedupe16(SB), NOSPLIT, $0-56
	MOVQ  src_len+32(FP), AX
	CMPQ  AX, $0x00
	JE    short
	MOVQ  dst_base+0(FP), CX
	MOVQ  src_base+24(FP), DX
	MOVQ  DX, BX
	MOVQ  CX, SI
	ADDQ  $0x10, DX
	SUBQ  $0x10, AX
	MOVOU (BX), X0
	MOVOU X0, (SI)
	ADDQ  $0x10, SI
	CMPQ  AX, $0x00
	JE    done

generic:
	MOVQ     SI, DI
	ADDQ     $0x10, DI
	MOVOU    (BX), X0
	MOVOU    (DX), X1
	MOVOU    X1, (SI)
	PCMPEQQ  X0, X1
	PMOVMSKB X1, R8
	CMPL     R8, $0x0000ffff
	CMOVQNE  DI, SI
	ADDQ     $0x10, BX
	ADDQ     $0x10, DX
	SUBQ     $0x10, AX
	CMPQ     AX, $0x00
	JG       generic

done:
	SUBQ CX, SI
	MOVQ SI, ret+48(FP)
	RET

short:
	MOVQ AX, ret+48(FP)
	RET

// func dedupe32(dst []byte, src []byte) int
// Requires: CMOV, SSE2, SSE4.1
TEXT ·dedupe32(SB), NOSPLIT, $0-56
	MOVQ  src_len+32(FP), AX
	CMPQ  AX, $0x00
	JE    short
	MOVQ  dst_base+0(FP), CX
	MOVQ  src_base+24(FP), DX
	MOVQ  DX, BX
	MOVQ  CX, SI
	ADDQ  $0x20, DX
	SUBQ  $0x20, AX
	MOVOU (BX), X0
	MOVOU 16(BX), X1
	MOVOU X0, (SI)
	MOVOU X1, 16(SI)
	ADDQ  $0x20, SI
	CMPQ  AX, $0x00
	JE    done

generic:
	MOVQ     SI, DI
	ADDQ     $0x20, DI
	MOVOU    (DX), X2
	MOVOU    16(DX), X3
	MOVOU    (BX), X0
	MOVOU    16(BX), X1
	MOVOU    X2, (SI)
	MOVOU    X3, 16(SI)
	PCMPEQQ  X0, X2
	PCMPEQQ  X1, X3
	PMOVMSKB X2, R8
	PMOVMSKB X3, R9
	ANDL     R9, R8
	CMPL     R8, $0x0000ffff
	CMOVQNE  DI, SI
	ADDQ     $0x20, BX
	ADDQ     $0x20, DX
	SUBQ     $0x20, AX
	CMPQ     AX, $0x00
	JG       generic

done:
	SUBQ CX, SI
	MOVQ SI, ret+48(FP)
	RET

short:
	MOVQ AX, ret+48(FP)
	RET
