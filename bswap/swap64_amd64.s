// Code generated by command: go run swap64_asm.go -pkg bswap -out ../bswap/swap64_amd64.s -stubs ../bswap/swap64_amd64.go. DO NOT EDIT.

#include "textflag.h"

// func swap64(b []byte)
// Requires: AVX, AVX2
TEXT Â·swap64(SB), NOSPLIT, $0-24
	MOVQ    b_base+0(FP), AX
	MOVQ    b_len+8(FP), CX
	MOVQ    AX, DX
	ADDQ    CX, DX
	VMOVDQU shuffle_mask<>+0(SB), Y0

avx2_loop:
	MOVQ    AX, CX
	ADDQ    $0x80, CX
	CMPQ    CX, DX
	JAE     x86_loop
	VMOVDQU (AX), Y1
	VMOVDQU 32(AX), Y2
	VMOVDQU 64(AX), Y3
	VMOVDQU 96(AX), Y4
	VPSHUFB Y0, Y1, Y1
	VPSHUFB Y0, Y2, Y2
	VPSHUFB Y0, Y3, Y3
	VPSHUFB Y0, Y4, Y4
	VMOVDQU Y1, (AX)
	VMOVDQU Y2, 32(AX)
	VMOVDQU Y3, 64(AX)
	VMOVDQU Y4, 96(AX)
	MOVQ    CX, AX
	JMP     avx2_loop

x86_loop:
	MOVQ   AX, CX
	ADDQ   $0x20, CX
	CMPQ   CX, DX
	JAE    slow_loop
	MOVQ   (AX), BX
	MOVQ   8(AX), BP
	MOVQ   16(AX), SI
	MOVQ   24(AX), DI
	BSWAPQ BX
	BSWAPQ BP
	BSWAPQ SI
	BSWAPQ DI
	MOVQ   BX, (AX)
	MOVQ   BP, 8(AX)
	MOVQ   SI, 16(AX)
	MOVQ   DI, 24(AX)
	MOVQ   CX, AX
	JMP    x86_loop

slow_loop:
	CMPQ   AX, DX
	JAE    done
	MOVQ   (AX), CX
	BSWAPQ CX
	MOVQ   CX, (AX)
	ADDQ   $0x08, AX
	JMP    slow_loop

done:
	RET

DATA shuffle_mask<>+0(SB)/1, $0x07
DATA shuffle_mask<>+1(SB)/1, $0x06
DATA shuffle_mask<>+2(SB)/1, $0x05
DATA shuffle_mask<>+3(SB)/1, $0x04
DATA shuffle_mask<>+4(SB)/1, $0x03
DATA shuffle_mask<>+5(SB)/1, $0x02
DATA shuffle_mask<>+6(SB)/1, $0x01
DATA shuffle_mask<>+7(SB)/1, $0x00
DATA shuffle_mask<>+8(SB)/1, $0x0f
DATA shuffle_mask<>+9(SB)/1, $0x0e
DATA shuffle_mask<>+10(SB)/1, $0x0d
DATA shuffle_mask<>+11(SB)/1, $0x0c
DATA shuffle_mask<>+12(SB)/1, $0x0b
DATA shuffle_mask<>+13(SB)/1, $0x0a
DATA shuffle_mask<>+14(SB)/1, $0x09
DATA shuffle_mask<>+15(SB)/1, $0x08
DATA shuffle_mask<>+16(SB)/1, $0x07
DATA shuffle_mask<>+17(SB)/1, $0x06
DATA shuffle_mask<>+18(SB)/1, $0x05
DATA shuffle_mask<>+19(SB)/1, $0x04
DATA shuffle_mask<>+20(SB)/1, $0x03
DATA shuffle_mask<>+21(SB)/1, $0x02
DATA shuffle_mask<>+22(SB)/1, $0x01
DATA shuffle_mask<>+23(SB)/1, $0x00
DATA shuffle_mask<>+24(SB)/1, $0x0f
DATA shuffle_mask<>+25(SB)/1, $0x0e
DATA shuffle_mask<>+26(SB)/1, $0x0d
DATA shuffle_mask<>+27(SB)/1, $0x0c
DATA shuffle_mask<>+28(SB)/1, $0x0b
DATA shuffle_mask<>+29(SB)/1, $0x0a
DATA shuffle_mask<>+30(SB)/1, $0x09
DATA shuffle_mask<>+31(SB)/1, $0x08
GLOBL shuffle_mask<>(SB), RODATA|NOPTR, $32
