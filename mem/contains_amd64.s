// Code generated by command: go run contains_asm.go -pkg mem -out ../mem/contains_amd64.s -stubs ../mem/contains_amd64.go. DO NOT EDIT.

#include "textflag.h"

// func containsByteAVX2(haystack []byte, needle byte) bool
// Requires: AVX, AVX2, SSE4.1
TEXT Â·containsByteAVX2(SB), NOSPLIT, $0-33
	MOVQ         haystack_base+0(FP), AX
	MOVQ         haystack_len+8(FP), CX
	MOVQ         AX, DX
	ADDQ         CX, DX
	MOVB         needle+24(FP), CL
	MOVB         $0x00, ret+32(FP)
	MOVQ         $0x0000000000000000, BX
	PINSRQ       $0x00, BX, X8
	VPBROADCASTQ X8, Y8
	MOVBLZX      CL, BX
	PINSRB       $0x00, BX, X9
	VPBROADCASTB X9, Y9
	MOVQ         AX, BX

avx2_loop:
	ADDQ     $0x00000100, BX
	CMPQ     BX, DX
	JA       tail_loop
	VPCMPEQB (AX), Y9, Y0
	VPCMPEQB 32(AX), Y9, Y1
	VPCMPEQB 64(AX), Y9, Y2
	VPCMPEQB 96(AX), Y9, Y3
	VPCMPEQB 128(AX), Y9, Y4
	VPCMPEQB 160(AX), Y9, Y5
	VPCMPEQB 192(AX), Y9, Y6
	VPCMPEQB 224(AX), Y9, Y7
	VPOR     Y1, Y0, Y0
	VPOR     Y3, Y2, Y2
	VPOR     Y5, Y4, Y4
	VPOR     Y7, Y6, Y6
	VPOR     Y2, Y0, Y0
	VPOR     Y6, Y4, Y4
	VPOR     Y4, Y0, Y0
	VPTEST   Y0, Y8
	JCC      found
	MOVQ     BX, AX
	JMP      avx2_loop

tail_loop:
	CMPQ AX, DX
	JE   done
	MOVB (AX), BL
	CMPB CL, BL
	JE   found
	ADDQ $0x01, AX
	JMP  tail_loop

found:
	MOVB $0x01, ret+32(FP)

done:
	RET
