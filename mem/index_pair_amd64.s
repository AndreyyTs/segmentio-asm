// Code generated by command: go run index_pair_asm.go -pkg mem -out ../mem/index_pair_amd64.s -stubs ../mem/index_pair_amd64.go. DO NOT EDIT.

#include "textflag.h"

// func indexPair1(b []byte) int
TEXT ·indexPair1(SB), NOSPLIT, $0-32
	MOVQ b_base+0(FP), AX
	MOVQ b_len+8(FP), CX
	CMPQ CX, $0x01
	JBE  done
	MOVQ AX, DX
	MOVQ AX, BX
	ADDQ CX, BX
	MOVQ DX, SI
	ADDQ $0x01, SI

loop1:
	MOVB (DX), DI
	MOVB (SI), R8
	CMPB DI, R8
	JE   found
	ADDQ $0x01, DX
	ADDQ $0x01, SI
	CMPQ DX, BX
	JNE  loop1

done:
	MOVQ CX, ret+24(FP)
	RET

found:
	SUBQ AX, DX
	MOVQ DX, ret+24(FP)
	RET

// func indexPair2(b []byte) int
TEXT ·indexPair2(SB), NOSPLIT, $0-32
	MOVQ b_base+0(FP), AX
	MOVQ b_len+8(FP), CX
	CMPQ CX, $0x02
	JBE  done
	MOVQ AX, DX
	MOVQ AX, BX
	ADDQ CX, BX
	MOVQ DX, SI
	ADDQ $0x02, SI

loop1:
	MOVW (DX), DI
	MOVW (SI), R8
	CMPW DI, R8
	JE   found
	ADDQ $0x02, DX
	ADDQ $0x02, SI
	CMPQ DX, BX
	JNE  loop1

done:
	MOVQ CX, ret+24(FP)
	RET

found:
	SUBQ AX, DX
	MOVQ DX, ret+24(FP)
	RET

// func indexPair4(b []byte) int
TEXT ·indexPair4(SB), NOSPLIT, $0-32
	MOVQ b_base+0(FP), AX
	MOVQ b_len+8(FP), CX
	CMPQ CX, $0x04
	JBE  done
	MOVQ AX, DX
	MOVQ AX, BX
	ADDQ CX, BX
	MOVQ DX, SI
	ADDQ $0x04, SI

loop1:
	MOVL (DX), DI
	MOVL (SI), R8
	CMPL DI, R8
	JE   found
	ADDQ $0x04, DX
	ADDQ $0x04, SI
	CMPQ DX, BX
	JNE  loop1

done:
	MOVQ CX, ret+24(FP)
	RET

found:
	SUBQ AX, DX
	MOVQ DX, ret+24(FP)
	RET

// func indexPair8(b []byte) int
TEXT ·indexPair8(SB), NOSPLIT, $0-32
	MOVQ b_base+0(FP), AX
	MOVQ b_len+8(FP), CX
	CMPQ CX, $0x08
	JBE  done
	MOVQ AX, DX
	MOVQ AX, BX
	ADDQ CX, BX
	MOVQ DX, SI
	ADDQ $0x08, SI

loop1:
	MOVQ (DX), DI
	MOVQ (SI), R8
	CMPQ DI, R8
	JE   found
	ADDQ $0x08, DX
	ADDQ $0x08, SI
	CMPQ DX, BX
	JNE  loop1

done:
	MOVQ CX, ret+24(FP)
	RET

found:
	SUBQ AX, DX
	MOVQ DX, ret+24(FP)
	RET

// func indexPair16(b []byte) int
// Requires: SSE2, SSE4.1
TEXT ·indexPair16(SB), NOSPLIT, $0-32
	MOVQ b_base+0(FP), AX
	MOVQ b_len+8(FP), CX
	CMPQ CX, $0x10
	JBE  done
	MOVQ AX, DX
	MOVQ AX, BX
	ADDQ CX, BX
	MOVQ DX, SI
	ADDQ $0x10, SI

loop1:
	MOVOU    (DX), X0
	MOVOU    (SI), X1
	PCMPEQQ  X0, X1
	PMOVMSKB X1, DI
	CMPL     DI, $0x0000ffff
	JE       found
	ADDQ     $0x10, DX
	ADDQ     $0x10, SI
	CMPQ     DX, BX
	JNE      loop1

done:
	MOVQ CX, ret+24(FP)
	RET

found:
	SUBQ AX, DX
	MOVQ DX, ret+24(FP)
	RET
