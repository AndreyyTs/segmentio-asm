// Code generated by command: go run index_pair_asm.go -pkg mem -out ../mem/index_pair_amd64.s -stubs ../mem/index_pair_amd64.go. DO NOT EDIT.

#include "textflag.h"

// func indexPair1(b []byte) int
// Requires: AVX, AVX2, BMI
TEXT ·indexPair1(SB), NOSPLIT, $0-32
	MOVQ b_base+0(FP), AX
	MOVQ b_len+8(FP), CX
	CMPQ CX, $0x01
	JBE  done
	MOVQ AX, DX
	MOVQ AX, BX
	ADDQ CX, BX
	SUBQ $0x01, BX
	CMPQ CX, $0x80
	JBE  generic
	BTL  $0x08, github·com∕segmentio∕asm∕cpu·X86+0(SB)
	JCS  avx2

generic:
	MOVB (DX), SI
	MOVB 1(DX), DI
	CMPB SI, DI
	JE   found
	ADDQ $0x01, DX
	CMPQ DX, BX
	JNE  generic

done:
	MOVQ CX, ret+24(FP)
	RET

found:
	SUBQ AX, DX
	MOVQ DX, ret+24(FP)
	RET

avx2:
	MOVQ BX, SI
	SUBQ $0x81, SI
	MOVQ $0x0000000000000000, DI
	MOVQ $0x0000000000000000, R8
	MOVQ $0x0000000000000000, R9
	MOVQ $0x0000000000000000, R10

avx2_loop:
	VMOVDQU   (DX), Y0
	VMOVDQU   1(DX), Y1
	VMOVDQU   32(DX), Y2
	VMOVDQU   33(DX), Y3
	VMOVDQU   64(DX), Y4
	VMOVDQU   65(DX), Y5
	VMOVDQU   96(DX), Y6
	VMOVDQU   97(DX), Y7
	VPCMPEQB  Y0, Y1, Y1
	VPCMPEQB  Y2, Y3, Y3
	VPCMPEQB  Y4, Y5, Y5
	VPCMPEQB  Y6, Y7, Y7
	VPMOVMSKB Y1, DI
	VPMOVMSKB Y3, R8
	VPMOVMSKB Y5, R9
	VPMOVMSKB Y7, R10
	SHLQ      $0x20, R8
	SHLQ      $0x20, R10
	ORQ       R8, DI
	ORQ       R10, R9
	TZCNTQ    DI, DI
	TZCNTQ    R9, R9
	CMPQ      DI, $0x40
	JNE       avx2_found_mask0
	CMPQ      R9, $0x40
	JNE       avx2_found_mask2
	ADDQ      $0x80, DX
	CMPQ      DX, SI
	JBE       avx2_loop
	VZEROUPPER
	CMPQ      DX, BX
	JB        generic
	JMP       done

avx2_found_mask0:
	ADDQ DI, DX
	VZEROUPPER
	JMP  found

avx2_found_mask2:
	ADDQ R9, DX
	VZEROUPPER
	JMP  found

// func indexPair2(b []byte) int
// Requires: AVX, AVX2, BMI
TEXT ·indexPair2(SB), NOSPLIT, $0-32
	MOVQ b_base+0(FP), AX
	MOVQ b_len+8(FP), CX
	CMPQ CX, $0x02
	JBE  done
	MOVQ AX, DX
	MOVQ AX, BX
	ADDQ CX, BX
	SUBQ $0x02, BX
	CMPQ CX, $0x80
	JBE  generic
	BTL  $0x08, github·com∕segmentio∕asm∕cpu·X86+0(SB)
	JCS  avx2

generic:
	MOVW (DX), SI
	MOVW 2(DX), DI
	CMPW SI, DI
	JE   found
	ADDQ $0x02, DX
	CMPQ DX, BX
	JNE  generic

done:
	MOVQ CX, ret+24(FP)
	RET

found:
	SUBQ AX, DX
	MOVQ DX, ret+24(FP)
	RET

avx2:
	MOVQ BX, SI
	SUBQ $0x82, SI
	MOVQ $0x0000000000000000, DI
	MOVQ $0x0000000000000000, R8
	MOVQ $0x0000000000000000, R9
	MOVQ $0x0000000000000000, R10

avx2_loop:
	VMOVDQU   (DX), Y0
	VMOVDQU   2(DX), Y1
	VMOVDQU   32(DX), Y2
	VMOVDQU   34(DX), Y3
	VMOVDQU   64(DX), Y4
	VMOVDQU   66(DX), Y5
	VMOVDQU   96(DX), Y6
	VMOVDQU   98(DX), Y7
	VPCMPEQW  Y0, Y1, Y1
	VPCMPEQW  Y2, Y3, Y3
	VPCMPEQW  Y4, Y5, Y5
	VPCMPEQW  Y6, Y7, Y7
	VPMOVMSKB Y1, DI
	VPMOVMSKB Y3, R8
	VPMOVMSKB Y5, R9
	VPMOVMSKB Y7, R10
	SHLQ      $0x20, R8
	SHLQ      $0x20, R10
	ORQ       R8, DI
	ORQ       R10, R9
	TZCNTQ    DI, DI
	TZCNTQ    R9, R9
	CMPQ      DI, $0x40
	JNE       avx2_found_mask0
	CMPQ      R9, $0x40
	JNE       avx2_found_mask2
	ADDQ      $0x80, DX
	CMPQ      DX, SI
	JBE       avx2_loop
	VZEROUPPER
	CMPQ      DX, BX
	JB        generic
	JMP       done

avx2_found_mask0:
	ADDQ DI, DX
	VZEROUPPER
	JMP  found

avx2_found_mask2:
	ADDQ R9, DX
	VZEROUPPER
	JMP  found

// func indexPair4(b []byte) int
// Requires: AVX, AVX2, BMI
TEXT ·indexPair4(SB), NOSPLIT, $0-32
	MOVQ b_base+0(FP), AX
	MOVQ b_len+8(FP), CX
	CMPQ CX, $0x04
	JBE  done
	MOVQ AX, DX
	MOVQ AX, BX
	ADDQ CX, BX
	SUBQ $0x04, BX
	CMPQ CX, $0x80
	JBE  generic
	BTL  $0x08, github·com∕segmentio∕asm∕cpu·X86+0(SB)
	JCS  avx2

generic:
	MOVL (DX), SI
	MOVL 4(DX), DI
	CMPL SI, DI
	JE   found
	ADDQ $0x04, DX
	CMPQ DX, BX
	JNE  generic

done:
	MOVQ CX, ret+24(FP)
	RET

found:
	SUBQ AX, DX
	MOVQ DX, ret+24(FP)
	RET

avx2:
	MOVQ BX, SI
	SUBQ $0x84, SI
	MOVQ $0x0000000000000000, DI
	MOVQ $0x0000000000000000, R8
	MOVQ $0x0000000000000000, R9
	MOVQ $0x0000000000000000, R10

avx2_loop:
	VMOVDQU   (DX), Y0
	VMOVDQU   4(DX), Y1
	VMOVDQU   32(DX), Y2
	VMOVDQU   36(DX), Y3
	VMOVDQU   64(DX), Y4
	VMOVDQU   68(DX), Y5
	VMOVDQU   96(DX), Y6
	VMOVDQU   100(DX), Y7
	VPCMPEQD  Y0, Y1, Y1
	VPCMPEQD  Y2, Y3, Y3
	VPCMPEQD  Y4, Y5, Y5
	VPCMPEQD  Y6, Y7, Y7
	VPMOVMSKB Y1, DI
	VPMOVMSKB Y3, R8
	VPMOVMSKB Y5, R9
	VPMOVMSKB Y7, R10
	SHLQ      $0x20, R8
	SHLQ      $0x20, R10
	ORQ       R8, DI
	ORQ       R10, R9
	TZCNTQ    DI, DI
	TZCNTQ    R9, R9
	CMPQ      DI, $0x40
	JNE       avx2_found_mask0
	CMPQ      R9, $0x40
	JNE       avx2_found_mask2
	ADDQ      $0x80, DX
	CMPQ      DX, SI
	JBE       avx2_loop
	VZEROUPPER
	CMPQ      DX, BX
	JB        generic
	JMP       done

avx2_found_mask0:
	ADDQ DI, DX
	VZEROUPPER
	JMP  found

avx2_found_mask2:
	ADDQ R9, DX
	VZEROUPPER
	JMP  found

// func indexPair8(b []byte) int
// Requires: AVX, AVX2, BMI
TEXT ·indexPair8(SB), NOSPLIT, $0-32
	MOVQ b_base+0(FP), AX
	MOVQ b_len+8(FP), CX
	CMPQ CX, $0x08
	JBE  done
	MOVQ AX, DX
	MOVQ AX, BX
	ADDQ CX, BX
	SUBQ $0x08, BX
	CMPQ CX, $0x80
	JBE  generic
	BTL  $0x08, github·com∕segmentio∕asm∕cpu·X86+0(SB)
	JCS  avx2

generic:
	MOVQ (DX), SI
	MOVQ 8(DX), DI
	CMPQ SI, DI
	JE   found
	ADDQ $0x08, DX
	CMPQ DX, BX
	JNE  generic

done:
	MOVQ CX, ret+24(FP)
	RET

found:
	SUBQ AX, DX
	MOVQ DX, ret+24(FP)
	RET

avx2:
	MOVQ BX, SI
	SUBQ $0x88, SI
	MOVQ $0x0000000000000000, DI
	MOVQ $0x0000000000000000, R8
	MOVQ $0x0000000000000000, R9
	MOVQ $0x0000000000000000, R10

avx2_loop:
	VMOVDQU   (DX), Y0
	VMOVDQU   8(DX), Y1
	VMOVDQU   32(DX), Y2
	VMOVDQU   40(DX), Y3
	VMOVDQU   64(DX), Y4
	VMOVDQU   72(DX), Y5
	VMOVDQU   96(DX), Y6
	VMOVDQU   104(DX), Y7
	VPCMPEQQ  Y0, Y1, Y1
	VPCMPEQQ  Y2, Y3, Y3
	VPCMPEQQ  Y4, Y5, Y5
	VPCMPEQQ  Y6, Y7, Y7
	VPMOVMSKB Y1, DI
	VPMOVMSKB Y3, R8
	VPMOVMSKB Y5, R9
	VPMOVMSKB Y7, R10
	SHLQ      $0x20, R8
	SHLQ      $0x20, R10
	ORQ       R8, DI
	ORQ       R10, R9
	TZCNTQ    DI, DI
	TZCNTQ    R9, R9
	CMPQ      DI, $0x40
	JNE       avx2_found_mask0
	CMPQ      R9, $0x40
	JNE       avx2_found_mask2
	ADDQ      $0x80, DX
	CMPQ      DX, SI
	JBE       avx2_loop
	VZEROUPPER
	CMPQ      DX, BX
	JB        generic
	JMP       done

avx2_found_mask0:
	ADDQ DI, DX
	VZEROUPPER
	JMP  found

avx2_found_mask2:
	ADDQ R9, DX
	VZEROUPPER
	JMP  found

// func indexPair16(b []byte) int
// Requires: SSE2, SSE4.1
TEXT ·indexPair16(SB), NOSPLIT, $0-32
	MOVQ b_base+0(FP), AX
	MOVQ b_len+8(FP), CX
	CMPQ CX, $0x10
	JBE  done
	MOVQ AX, DX
	MOVQ AX, BX
	ADDQ CX, BX
	SUBQ $0x10, BX

generic:
	MOVOU    (DX), X0
	MOVOU    16(DX), X1
	PCMPEQQ  X0, X1
	PMOVMSKB X1, SI
	CMPL     SI, $0x0000ffff
	JE       found
	ADDQ     $0x10, DX
	CMPQ     DX, BX
	JNE      generic

done:
	MOVQ CX, ret+24(FP)
	RET

found:
	SUBQ AX, DX
	MOVQ DX, ret+24(FP)
	RET
