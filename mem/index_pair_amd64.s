// Code generated by command: go run index_pair_asm.go -pkg mem -out ../mem/index_pair_amd64.s -stubs ../mem/index_pair_amd64.go. DO NOT EDIT.

#include "textflag.h"

// func indexPair1(b []byte) int
// Requires: AVX, AVX2, BMI
TEXT ·indexPair1(SB), NOSPLIT, $0-32
	MOVQ b_base+0(FP), AX
	MOVQ b_len+8(FP), CX
	CMPQ CX, $0x01
	JBE  done
	MOVQ AX, DX
	MOVQ AX, BX
	ADDQ CX, BX
	MOVQ DX, SI
	ADDQ $0x01, SI
	CMPQ CX, $0x40
	JBE  generic
	BTL  $0x08, github·com∕segmentio∕asm∕cpu·X86+0(SB)
	JCS  avx2

generic:
	MOVB (DX), DI
	MOVB (SI), R8
	CMPB DI, R8
	JE   found
	ADDQ $0x01, DX
	ADDQ $0x01, SI
	CMPQ DX, BX
	JNE  generic

done:
	MOVQ CX, ret+24(FP)
	RET

found:
	SUBQ AX, DX
	MOVQ DX, ret+24(FP)
	RET

avx2:
	MOVQ BX, DI
	SUBQ $0x20, DI

avx2_loop:
	VMOVDQU   (DX), Y0
	VMOVDQU   (SI), Y1
	VPCMPEQB  Y0, Y1, Y1
	VPMOVMSKB Y1, R8
	TZCNTQ    R8, R8
	CMPQ      R8, $0x40
	JNE       avx2_found
	ADDQ      $0x20, DX
	ADDQ      $0x20, SI
	CMPQ      SI, DI
	JBE       avx2_loop
	VZEROUPPER
	CMPQ      SI, BX
	JB        generic
	JMP       done

avx2_found:
	MOVQ $0x00000040, CX
	SUBQ R8, CX
	ADDQ CX, DX
	JMP  found

// func indexPair2(b []byte) int
// Requires: AVX, AVX2, BMI
TEXT ·indexPair2(SB), NOSPLIT, $0-32
	MOVQ b_base+0(FP), AX
	MOVQ b_len+8(FP), CX
	CMPQ CX, $0x02
	JBE  done
	MOVQ AX, DX
	MOVQ AX, BX
	ADDQ CX, BX
	MOVQ DX, SI
	ADDQ $0x02, SI

generic:
	MOVW (DX), DI
	MOVW (SI), R8
	CMPW DI, R8
	JE   found
	ADDQ $0x02, DX
	ADDQ $0x02, SI
	CMPQ DX, BX
	JNE  generic

done:
	MOVQ CX, ret+24(FP)
	RET

found:
	SUBQ AX, DX
	MOVQ DX, ret+24(FP)
	RET
	MOVQ BX, DI
	SUBQ $0x20, DI

avx2_loop:
	VMOVDQU   (DX), Y0
	VMOVDQU   (SI), Y1
	VPCMPEQB  Y0, Y1, Y1
	VPMOVMSKB Y1, R8
	TZCNTQ    R8, R8
	CMPQ      R8, $0x40
	JNE       avx2_found
	ADDQ      $0x20, DX
	ADDQ      $0x20, SI
	CMPQ      SI, DI
	JBE       avx2_loop
	VZEROUPPER
	CMPQ      SI, BX
	JB        generic
	JMP       done

avx2_found:
	MOVQ $0x00000040, CX
	SUBQ R8, CX
	ADDQ CX, DX
	JMP  found

// func indexPair4(b []byte) int
// Requires: AVX, AVX2, BMI
TEXT ·indexPair4(SB), NOSPLIT, $0-32
	MOVQ b_base+0(FP), AX
	MOVQ b_len+8(FP), CX
	CMPQ CX, $0x04
	JBE  done
	MOVQ AX, DX
	MOVQ AX, BX
	ADDQ CX, BX
	MOVQ DX, SI
	ADDQ $0x04, SI

generic:
	MOVL (DX), DI
	MOVL (SI), R8
	CMPL DI, R8
	JE   found
	ADDQ $0x04, DX
	ADDQ $0x04, SI
	CMPQ DX, BX
	JNE  generic

done:
	MOVQ CX, ret+24(FP)
	RET

found:
	SUBQ AX, DX
	MOVQ DX, ret+24(FP)
	RET
	MOVQ BX, DI
	SUBQ $0x20, DI

avx2_loop:
	VMOVDQU   (DX), Y0
	VMOVDQU   (SI), Y1
	VPCMPEQB  Y0, Y1, Y1
	VPMOVMSKB Y1, R8
	TZCNTQ    R8, R8
	CMPQ      R8, $0x40
	JNE       avx2_found
	ADDQ      $0x20, DX
	ADDQ      $0x20, SI
	CMPQ      SI, DI
	JBE       avx2_loop
	VZEROUPPER
	CMPQ      SI, BX
	JB        generic
	JMP       done

avx2_found:
	MOVQ $0x00000040, CX
	SUBQ R8, CX
	ADDQ CX, DX
	JMP  found

// func indexPair8(b []byte) int
// Requires: AVX, AVX2, BMI
TEXT ·indexPair8(SB), NOSPLIT, $0-32
	MOVQ b_base+0(FP), AX
	MOVQ b_len+8(FP), CX
	CMPQ CX, $0x08
	JBE  done
	MOVQ AX, DX
	MOVQ AX, BX
	ADDQ CX, BX
	MOVQ DX, SI
	ADDQ $0x08, SI

generic:
	MOVQ (DX), DI
	MOVQ (SI), R8
	CMPQ DI, R8
	JE   found
	ADDQ $0x08, DX
	ADDQ $0x08, SI
	CMPQ DX, BX
	JNE  generic

done:
	MOVQ CX, ret+24(FP)
	RET

found:
	SUBQ AX, DX
	MOVQ DX, ret+24(FP)
	RET
	MOVQ BX, DI
	SUBQ $0x20, DI

avx2_loop:
	VMOVDQU   (DX), Y0
	VMOVDQU   (SI), Y1
	VPCMPEQB  Y0, Y1, Y1
	VPMOVMSKB Y1, R8
	TZCNTQ    R8, R8
	CMPQ      R8, $0x40
	JNE       avx2_found
	ADDQ      $0x20, DX
	ADDQ      $0x20, SI
	CMPQ      SI, DI
	JBE       avx2_loop
	VZEROUPPER
	CMPQ      SI, BX
	JB        generic
	JMP       done

avx2_found:
	MOVQ $0x00000040, CX
	SUBQ R8, CX
	ADDQ CX, DX
	JMP  found

// func indexPair16(b []byte) int
// Requires: AVX, AVX2, BMI, SSE2, SSE4.1
TEXT ·indexPair16(SB), NOSPLIT, $0-32
	MOVQ b_base+0(FP), AX
	MOVQ b_len+8(FP), CX
	CMPQ CX, $0x10
	JBE  done
	MOVQ AX, DX
	MOVQ AX, BX
	ADDQ CX, BX
	MOVQ DX, SI
	ADDQ $0x10, SI

generic:
	MOVOU    (DX), X0
	MOVOU    (SI), X1
	PCMPEQQ  X0, X1
	PMOVMSKB X1, DI
	CMPL     DI, $0x0000ffff
	JE       found
	ADDQ     $0x10, DX
	ADDQ     $0x10, SI
	CMPQ     DX, BX
	JNE      generic

done:
	MOVQ CX, ret+24(FP)
	RET

found:
	SUBQ AX, DX
	MOVQ DX, ret+24(FP)
	RET
	MOVQ BX, DI
	SUBQ $0x20, DI

avx2_loop:
	VMOVDQU   (DX), Y0
	VMOVDQU   (SI), Y1
	VPCMPEQB  Y0, Y1, Y1
	VPMOVMSKB Y1, R8
	TZCNTQ    R8, R8
	CMPQ      R8, $0x40
	JNE       avx2_found
	ADDQ      $0x20, DX
	ADDQ      $0x20, SI
	CMPQ      SI, DI
	JBE       avx2_loop
	VZEROUPPER
	CMPQ      SI, BX
	JB        generic
	JMP       done

avx2_found:
	MOVQ $0x00000040, CX
	SUBQ R8, CX
	ADDQ CX, DX
	JMP  found
