// Code generated by command: go run copy_asm.go -pkg mem -out ../mem/copy_amd64.s -stubs ../mem/copy_amd64.go. DO NOT EDIT.

#include "textflag.h"

// func Copy(dst []byte, src []byte) int
// Requires: AVX, CMOV
TEXT ·Copy(SB), NOSPLIT, $0-56
	MOVQ    dst_base+0(FP), AX
	MOVQ    src_base+24(FP), CX
	MOVQ    dst_len+8(FP), DX
	MOVQ    src_len+32(FP), BX
	CMPQ    BX, DX
	CMOVQGT BX, DX
	MOVQ    DX, BX
	BTL     $0x08, github·com∕segmentio∕asm∕cpu·X86+0(SB)
	JCS     avx2

cmp8:
	CMPQ BX, $0x08
	JB   cmp4
	MOVQ (CX), SI
	MOVQ SI, (AX)
	ADDQ $0x08, AX
	ADDQ $0x08, CX
	SUBQ $0x08, BX
	JMP  cmp8

cmp4:
	CMPQ BX, $0x04
	JB   cmp2
	MOVL (CX), SI
	MOVL SI, (AX)
	ADDQ $0x04, AX
	ADDQ $0x04, CX
	SUBQ $0x04, BX

cmp2:
	CMPQ BX, $0x02
	JB   cmp1
	MOVW (CX), SI
	MOVW SI, (AX)
	ADDQ $0x02, AX
	ADDQ $0x02, CX
	SUBQ $0x02, BX

cmp1:
	CMPQ BX, $0x01
	JB   done
	MOVB (CX), CL
	MOVB CL, (AX)

done:
	MOVQ DX, ret+48(FP)
	RET

avx2:
cmp128:
	CMPQ    BX, $0x80
	JB      cmp64
	VMOVDQU (CX), Y0
	VMOVDQU 32(CX), Y1
	VMOVDQU 64(CX), Y2
	VMOVDQU 96(CX), Y3
	VMOVDQU Y0, (AX)
	VMOVDQU Y1, 32(AX)
	VMOVDQU Y2, 64(AX)
	VMOVDQU Y3, 96(AX)
	ADDQ    $0x80, AX
	ADDQ    $0x80, CX
	SUBQ    $0x80, BX
	JMP     cmp128

cmp64:
	CMPQ    BX, $0x40
	JB      cmp32
	VMOVDQU (CX), Y0
	VMOVDQU 32(CX), Y1
	VMOVDQU Y0, (AX)
	VMOVDQU Y1, 32(AX)
	ADDQ    $0x40, AX
	ADDQ    $0x40, CX
	SUBQ    $0x40, BX

cmp32:
	CMPQ    BX, $0x20
	JB      cmp8
	LEAQ    (AX)(BX*1), SI
	LEAQ    (CX)(BX*1), BX
	SUBQ    $0x20, SI
	SUBQ    $0x20, BX
	VMOVDQU (CX), Y0
	VMOVDQU (BX), Y1
	VMOVDQU Y0, (AX)
	VMOVDQU Y1, (SI)
	JMP     done
